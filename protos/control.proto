syntax = "proto3";

package kscaleos.control;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";

// Common error handling
enum ErrorCode {
    UNKNOWN = 0;
    NOT_IMPLEMENTED = 1;
    INVALID_ARGUMENT = 2;
    HARDWARE_FAILURE = 3;
}

message Error {
    ErrorCode code = 1;
    string message = 2;
}

// Per-actuator result message
message ActionResult {
    uint32 actuator_id = 1;
    bool success = 2;
    Error error = 3;
}

message ActionResponse {
    bool success = 1;
    Error error = 2;
}

service ActuatorControl {
    // Batch actuator commands
    rpc SetActuatorCommands(SetActuatorCommandsRequest) returns (SetActuatorCommandsResponse);
    rpc GetActuatorStates(GetActuatorStatesRequest) returns (GetActuatorStatesResponse);
    
    // Individual actuator commands
    rpc ConfigureActuator(ConfigureActuatorRequest) returns (ActionResponse);
    rpc ScanActuators(google.protobuf.Empty) returns (ScanActuatorsResponse);
    rpc DisableActuator(DisableActuatorRequest) returns (ActionResponse);
    rpc EnableActuator(EnableActuatorRequest) returns (ActionResponse);

}

service IMUService {
    rpc GetIMUData(google.protobuf.Empty) returns (IMUDataResponse);
    rpc CalibrateIMU(google.protobuf.Empty) returns (CalibrationResponse);
}

service SystemService {
    rpc GetIPAddress(google.protobuf.Empty) returns (GetIPAddressResponse);
    rpc SetWiFiCredentials(SetWiFiCredentialsRequest) returns (ActionResponse);
    rpc GetSystemInfo(google.protobuf.Empty) returns (GetSystemInfoResponse);
}

service CalibrationService {
    rpc GetCalibrationData(google.protobuf.Empty) returns (GetCalibrationDataResponse);
    rpc SetCalibrationData(SetCalibrationDataRequest) returns (ActionResponse);
}

// Batch command messages
message SetActuatorCommandsRequest {
    repeated ActuatorCommand commands = 1;
}

message ActuatorCommand {
    uint32 actuator_id = 1;
    oneof command {
        PositionControl position_control = 2;
        TorqueControl torque_control = 3;
        VelocityControl velocity_control = 4;
    }
}

message SetActuatorCommandsResponse {
    repeated ActionResult results = 1;
}

message ConfigureActuatorRequest {
    uint32 actuator_id = 1;
    map<string, string> parameters = 2;
}

message ScanActuatorsResponse {
    repeated uint32 actuator_ids = 1;
    Error error = 2;
}

message EnableActuatorRequest {
    uint32 actuator_id = 1;
}

message DisableActuatorRequest {
    uint32 actuator_id = 1;
    ActuatorState state = 2;
    Error error = 3;
}

// IMU Messages
message IMUDataResponse {
    IMUData data = 1;
    Error error = 2;
}

message IMUData {
    double accel_x = 1;
    double accel_y = 2;
    double accel_z = 3;
    double gyro_x = 4;
    double gyro_y = 5;
    double gyro_z = 6;
    double mag_x = 7;
    double mag_y = 8;
    double mag_z = 9;
    bool mag_available = 10;
}

message CalibrationResponse {
    bool success = 1;
    Error error = 2;
}

// System Messages
message GetIPAddressResponse {
    string ip_address = 1;
    Error error = 2;
}

message SetWiFiCredentialsRequest {
    string ssid = 1;
    string password = 2;
}

message GetSystemInfoResponse {
    uint64 total_ram = 1;
    uint64 used_ram = 2;
    uint64 total_disk = 3;
    uint64 used_disk = 4;
    float cpu_usage = 5;
    float npu_usage = 6;
    Error error = 7;
}

// Calibration Messages
message GetCalibrationDataResponse {
    string data = 1; // YAML data as string
    Error error = 2;
}

message SetCalibrationDataRequest {
    string data = 1; // YAML data as string
}


