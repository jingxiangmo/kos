variables:
  CARGO_HOME: $CI_PROJECT_DIR/.cargo
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  TOOLCHAIN_IMAGE: $CI_REGISTRY_IMAGE/toolchain
  GIT_SUBMODULE_STRATEGY: recursive

image: $TOOLCHAIN_IMAGE:latest

# Cache dependencies between builds
cache:
  paths:
    - .cargo
    - target/

# Define stages
stages:
  - build-toolchain
  - check
  - test
  - build

.runner: &runner
  tags:
    - linux-x64

build-toolchain:
  <<: *runner
  stage: build-toolchain
  image: docker:latest
  
  script:
    - |
      if [ "$GITLAB_CI" != "false" ]; then
        echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
        docker pull $TOOLCHAIN_IMAGE:latest || true
      fi
    - docker build --progress=plain --cache-from $TOOLCHAIN_IMAGE:latest -t $TOOLCHAIN_IMAGE:latest -f toolchain/Dockerfile .
    - |
      if [ "$GITLAB_CI" != "false" ]; then
        docker push $TOOLCHAIN_IMAGE:latest
      fi
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      changes:
        - toolchain/**/*
        - .gitlab-ci.yml

# Check formatting and run clippy on all branches
format:
  stage: check
  script:
    - cargo fmt -- --check
  rules:
    - when: always

clippy:
  stage: check
  script:
    - cargo clippy -- -D warnings
  rules:
    - when: always

# Test all features
test:
  stage: test
  script:
    - |
      if [ "$GITLAB_CI" != "false" ]; then
        cargo test -F stub --verbose
      else
        cargo test -F stub
      fi
  rules:
    - when: always

# Build binaries only on tags/releases
.build_template: &build_definition
  stage: build
  variables:
    CROSS_REMOTE: 1
  script:
    - cross build --release --target $TARGET --features $FEATURES --no-default-features
  artifacts:
    paths:
      - target/$TARGET/release/daemon
  rules:
    - if: $CI_COMMIT_TAG
      when: always
    - when: manual

# Linux x86_64
build-linux-x86_64-stub-release:
  <<: *build_definition
  variables:
    TARGET: x86_64-unknown-linux-gnu
    FEATURES: stub

# Linux aarch64
build-linux-aarch64-stub-release:
  <<: *build_definition
  variables:
    TARGET: aarch64-unknown-linux-gnu
    FEATURES: stub